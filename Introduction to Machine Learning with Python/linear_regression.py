# -*- coding: utf-8 -*-
"""Linear_Regression.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/13IuPXEn0B1sh7MqlrJ8JT6QddEDPVCYW
"""

import pandas as pd                                             # import for dataframes
import numpy as np                                              # import for arrays
import matplotlib.pyplot as plt                                 # import for plotting
from sklearn import linear_model                                # importing the Linear Regression Algorithm from sklearn
from sklearn.model_selection import train_test_split            # splitting data into training set and testing set  


# Link to dataset: https://archive.ics.uci.edu/ml/datasets/student+performance

#######################################################################################
# Step 1: Load the data and store the labels in variable x and target in variable y   #
#######################################################################################

data = pd.read_csv("student-mat.csv", sep=";")                      # Read in the data from the csv file
#print(data.head())

data = data[["G1", "G2", "G3", "studytime", "failures", "absences"]] # extract features to be used for this model
#print(data.head())

target = "G3"
X = np.array(data.drop([target], 1))
Y = np.array(data[target])

#######################################################################################
# Step 2: Split the dataset into a training set and test set.                         #
#         70% of the data should be for the training set.                             #
#         30% of the data should be for the test set.                                 #
#######################################################################################

x_train, x_test, y_train, y_test = train_test_split(X, Y, test_size = 0.3)

##################################
# Step 3: Create the model.      #
##################################

linear_regression_model = linear_model.LinearRegression()

##################################
# Step 4: Train the model.       #
##################################

linear_regression_model.fit(x_train, y_train)

##################################
# Step 5: Test the model.        #
##################################

y_predict = linear_regression_model.predict(x_test)

##################################
# Step 6: Evaluate the model.    #
##################################

accuracy = linear_regression_model.score(x_test, y_test)
accuracy = accuracy * 100
accuracy = accuracy.round(2)

print(f"\nAccuracy of the model is: {accuracy}%\n")

##############################################################################
# Step 7: Print out the result, input parameters, and expected result        #
##############################################################################

for i in range(len(y_predict)):
  print(y_predict[i].round(2), x_test[i], y_test[i])

##############################################################################
# Step 8: Graph the results of the independent and dependent variables       #
##############################################################################

x = "G2"
y = "G3"
plt.scatter(data[x], data[y])
plt.xlabel(x)
plt.ylabel("Final Grade")
plt.show()