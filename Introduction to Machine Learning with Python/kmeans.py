# -*- coding: utf-8 -*-
"""KMeans.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1ZlACU9c6WR8KE76r5v9paxjcpfj7QhHn
"""

from sklearn.datasets import make_blobs        # import to create clusters
from sklearn.cluster import KMeans             # import for KMeans algorithm
import matplotlib.pyplot as plt                # import for plotting

###############################################################################
# In this program, create data points that form 3 centers that use 2 features #
# and 300 samples. You may adjust the cluster standard deviation to what you  #
# want and randomize the samples.                                             #
###############################################################################

# Clusters before Kmeans is applied
x,y = make_blobs(n_samples=300, n_features=2, centers=3, cluster_std=0.2, shuffle=True, random_state=0)

# Specify the colours and markers to be used to disnguish the samples in their respective clusters
colours = ['brown', 'green', 'blue', 'grey']
markers = ['v', 'x', 'o', '^']   

# Create the kmeans model and apply the algorithm to the clusters
for cluster_count in range(1, 5):
    # Create the model
    kmeans_model = KMeans(n_clusters=cluster_count, init='k-means++', n_init=10, max_iter=300, tol=1e-4, random_state=0)
    
    # Compute cluster centers and predict cluster index for each sample
    predicted = kmeans_model.fit_predict(x)

    # Specify what cluster is being plotted
    for cluster_number in range(cluster_count):
        plt.scatter(x[predicted == cluster_number, 0], x[predicted == cluster_number, 1], c=colours[cluster_number], s=50, marker=markers[cluster_number], label='cluster '+ str(cluster_number + 1))        
    
    # plot the clusters and their centers
    plt.scatter(kmeans_model.cluster_centers_[:,0], kmeans_model.cluster_centers_[:,1], s=250, c='orange', marker='*', label='centroids')
    plt.grid()
    plt.title('Kmeans: ' + str(cluster_count) + ' Clusters')
    plt.legend()
    plt.show()